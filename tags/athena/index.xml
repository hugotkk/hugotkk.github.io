<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>athena on Hugo's IT journal</title><link>https://hugotkk.github.com/tags/athena/</link><description>Recent content in athena on Hugo's IT journal</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 05 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://hugotkk.github.com/tags/athena/index.xml" rel="self" type="application/rss+xml"/><item><title>Enabling ALB Access Logs and Analyzing with Athena</title><link>https://hugotkk.github.com/posts/enabling-alb-access-logs-and-analyzing-with-athena/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/enabling-alb-access-logs-and-analyzing-with-athena/</guid><description>Enable ALB access logging for debugging:
Follow this guide: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/enable-access-logging.html Access logs storage:
Logs are saved in S3 Difficult to view directly Log format:
Not written to a single file New file with timestamp after a set interval Solution: Set up Athena to query logs</description></item><item><title>Using Amazon Athena for Easier AWS Log Analysis</title><link>https://hugotkk.github.com/posts/using-amazon-athena-for-easier-aws-log-analysis/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/using-amazon-athena-for-easier-aws-log-analysis/</guid><description>AWS logs&amp;rsquo; default interface can be challenging to navigate for in-depth analysis. Amazon Athena can help address two common issues.
First, CloudTrail logs&amp;rsquo; default filters can be limiting. However, with Athena, you can use SQL to apply filters to each log field, allowing for more detailed analysis and improved insights.</description></item><item><title>Working with DateTime in AWS Athena</title><link>https://hugotkk.github.com/posts/working-with-datetime-in-aws-athena/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/working-with-datetime-in-aws-athena/</guid><description>Comparing varchar DateTime:
Use &amp;lsquo;&amp;gt;&amp;rsquo; and &amp;lsquo;&amp;lt;&amp;rsquo; operators Example: time &amp;gt;= &amp;#39;2022-07-20T00:00:00Z&amp;#39; Comparing int64 DateTime:
Convert int64 and varchar to timestamp: FROM_UNIXTIME(time/1000) &amp;lt; TIMESTAMP &amp;#39;2022-07-20 00:00:00&amp;#39; Convert int64 to varchar: DATE_FORMAT(FROM_UNIXTIME(time/1000), &amp;#39;%Y-%m-%dT%H:%i:%sZ&amp;#39;) &amp;lt;= &amp;#39;2022-02-13T00:00:00Z&amp;#39;</description></item></channel></rss>