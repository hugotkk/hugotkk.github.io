<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aws on Hugo's IT journal</title><link>https://hugotkk.github.com/tags/aws/</link><description>Recent content in aws on Hugo's IT journal</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 08 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://hugotkk.github.com/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Brief Overview of Scan, Query, Select, and Filter of DyanmoDB</title><link>https://hugotkk.github.com/posts/brief-overview-of-scan-query-select-and-filter-of-dyanmodb/</link><pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/brief-overview-of-scan-query-select-and-filter-of-dyanmodb/</guid><description>Scan and Query:
Amazon DynamoDB has two operations for retrieving data: Scan and Query. Scan retrieves all items in a table, making it inefficient for larger tables. Query is designed to retrieve specific items based on their partition key values, allowing filtering of results.</description></item><item><title>Critical Review of Hit Discussion's Video Monitoring Service: Pitfalls of Blaming Microservices</title><link>https://hugotkk.github.com/posts/critical-review-of-hit-discussions-video-monitoring-service-pitfalls-of-blaming-microservices/</link><pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/critical-review-of-hit-discussions-video-monitoring-service-pitfalls-of-blaming-microservices/</guid><description>A recent article on Prime Video Tech describes their approach to scaling up their audio-video monitoring service and reducing costs by 90%.
This blog post aims to critically analyze the article and address some issues and misconceptions.</description></item><item><title>Enabling ALB Access Logs and Analyzing with Athena</title><link>https://hugotkk.github.com/posts/enabling-alb-access-logs-and-analyzing-with-athena/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/enabling-alb-access-logs-and-analyzing-with-athena/</guid><description>Enable ALB access logging for debugging:
Follow this guide: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/enable-access-logging.html Access logs storage:
Logs are saved in S3 Difficult to view directly Log format:
Not written to a single file New file with timestamp after a set interval Solution: Set up Athena to query logs</description></item><item><title>Using Amazon Athena for Easier AWS Log Analysis</title><link>https://hugotkk.github.com/posts/using-amazon-athena-for-easier-aws-log-analysis/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/using-amazon-athena-for-easier-aws-log-analysis/</guid><description>AWS logs&amp;rsquo; default interface can be challenging to navigate for in-depth analysis. Amazon Athena can help address two common issues.
First, CloudTrail logs&amp;rsquo; default filters can be limiting. However, with Athena, you can use SQL to apply filters to each log field, allowing for more detailed analysis and improved insights.</description></item><item><title>Working with DateTime in AWS Athena</title><link>https://hugotkk.github.com/posts/working-with-datetime-in-aws-athena/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/working-with-datetime-in-aws-athena/</guid><description>Comparing varchar DateTime:
Use &amp;lsquo;&amp;gt;&amp;rsquo; and &amp;lsquo;&amp;lt;&amp;rsquo; operators Example: time &amp;gt;= &amp;#39;2022-07-20T00:00:00Z&amp;#39; Comparing int64 DateTime:
Convert int64 and varchar to timestamp: FROM_UNIXTIME(time/1000) &amp;lt; TIMESTAMP &amp;#39;2022-07-20 00:00:00&amp;#39; Convert int64 to varchar: DATE_FORMAT(FROM_UNIXTIME(time/1000), &amp;#39;%Y-%m-%dT%H:%i:%sZ&amp;#39;) &amp;lt;= &amp;#39;2022-02-13T00:00:00Z&amp;#39;</description></item><item><title>AWS ALB</title><link>https://hugotkk.github.com/posts/aws-alb/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-alb/</guid><description>Two connections maintained> Two connections maintained # ALB to target servers. Client to ALB. Keepalive/h2 setting> Keepalive/h2 setting # Applies to ALB-to-target connection, not client-to-target servers. Why Keepalive help to improve the performance: Limited number of connections between ALB to target servers, keepalive helps.</description></item><item><title>Building a Chat Room with Lambda and Websocket in AWS API Gateway</title><link>https://hugotkk.github.com/posts/aws-api-gateway-wss/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-api-gateway-wss/</guid><description>WebSocket Overview> WebSocket Overview # WebSocket Characteristics Bi-directional, persistent TCP connection between client and server Scaling Limitations WebSocket is stateful, cannot horizontally scale without a backend to store state (eg: Redis) API Gateway with Websocket> API Gateway with Websocket # Benefits</description></item><item><title>Building a Secure API Gateway with Cognito</title><link>https://hugotkk.github.com/posts/aws-api-gateway-with-cognito/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-api-gateway-with-cognito/</guid><description>To enable authorization the api with Amazon Cognito User Pools:
Create a user pool. Check out Secure your API Gateway with Amazon Cognito User Pools for a video tutorial. In the &amp;ldquo;Method Request&amp;rdquo; &amp;gt; &amp;ldquo;Auth&amp;rdquo; section of the API Gateway console, select the user pool.</description></item><item><title>Comparing HTTP and REST API Gateways</title><link>https://hugotkk.github.com/posts/aws-api-gateway-comparson/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-api-gateway-comparson/</guid><description>Main difference> Main difference # REST HTTP Quota Management Per group Not supported API key Management Supported Not supported Authorization Lambda/Cognito Lambda/IAM/JWT Lambda Input Payload only Request details (Event) VTL model Supported Not supported SDK and Documentation Generation Supported Not supported Lambda integration> Lambda integration # Both REST and HTTP Lambda integrations offer a powerful and flexible way to integrate Lambda functions with API Gateway, with some differences in input/output format and response handling.</description></item><item><title>Setting up ADFS Login in AWS with Windows Server 2012</title><link>https://hugotkk.github.com/posts/aws-adfs/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-adfs/</guid><description>Create a new Windows Server 2012 instance and install the following Roles and Features:
DNS ADFS AD Promote the server to a Domain Controller and create a new forest. I named mine hhuge9.</description></item><item><title>Setup gPRC with AWS ALB</title><link>https://hugotkk.github.com/posts/aws-alb-grpc/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-alb-grpc/</guid><description>gRPC> gRPC # Concept: Similar to REST API and JSON. Payload format: Binary Performance: Faster as smaller size than JSON. Usage: Primarily for service-to-service communication. Browser-to-service not widely supported. Protocol: Built on HTTP/2 client -&amp;gt; ALB: HTTPS only; ALB -&amp;gt; target: HTTP/HTTPS</description></item><item><title>Understanding TLS Passthrough and Other Features of AWS NLB</title><link>https://hugotkk.github.com/posts/aws-nlb/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-nlb/</guid><description>TLS Passthrough with AWS NLB> TLS Passthrough with AWS NLB # To setup TLS passthrough with NLB, follow these steps:
Listen: TCP - can be 80 or 443 Target: TCP - 443 Backend: HTTPS on 443 Here are some interesting features of NLB:</description></item><item><title>Unexpected Limitations: AWS Lambda's Inability to Directly Reference Secrets Manager and Parameter Store</title><link>https://hugotkk.github.com/posts/unexpected-limitations-aws-lambdas-inability-to-directly-reference-secrets-manager-and-parameter-store/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/unexpected-limitations-aws-lambdas-inability-to-directly-reference-secrets-manager-and-parameter-store/</guid><description>I was surprised to find that AWS Lambda cannot directly reference records from Secrets Manager in environment, especially considering that ECS can reference records from both Parameter Store and Secrets Manager.</description></item><item><title>Creating a Signed AWS API Request: A Handy Guide</title><link>https://hugotkk.github.com/posts/aws-sign-v4/</link><pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-sign-v4/</guid><description>To create a signed AWS API request, follow the detailed guide provided in Create a signed AWS API request.
To generate a signed request in Python, you can use the following script created by ChatGPT:</description></item><item><title>Understanding OAuth 2.0: Explore with Amazon Cognito</title><link>https://hugotkk.github.com/posts/aws-cognito/</link><pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-cognito/</guid><description>Difference between OAuth2.0, OIDC and SAML2> Difference between OAuth2.0, OIDC and SAML2 # OAuth 2.0 provides authorization using ID token. OIDC provides authentication using access token. SAML2 provides both authentication and authorization.</description></item><item><title>How to host a static website on S3</title><link>https://hugotkk.github.com/posts/aws-s3-hosting/</link><pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-s3-hosting/</guid><description>Concepts> Concepts # Block Public Access> Block Public Access # Prevent any public access in ACL or bucket policy. ACL: If you block public access in ACL, any public access granted to everyone will be ignored.</description></item><item><title>AWS SA Professional</title><link>https://hugotkk.github.com/posts/exam-aws-sa/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/exam-aws-sa/</guid><description>api> api # api gateway throttling limits aws throttling limit (region level) per account per-api per-stage (methods) per-client (usage plan) three type of endpoint edge-optimized (default) - route to nearest cloudfront regional private application discovery service> application discovery service # for migration planning connection type application discovery agent -&amp;gt; install on server.</description></item><item><title>AWS Certified DevOps Engineer - Professional</title><link>https://hugotkk.github.com/posts/exam-aws-devops/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/exam-aws-devops/</guid><description>DevOps choices> DevOps choices # Deployment> Deployment # faster boot time - opsworks slower; ami faster using chef - opsworks need to update config when new node online - opsworks Configure lifecycle event less administrative overhead: eb &amp;gt; cloudformation when both solutions works auto healing: opsworks, codedeploy, eb (bcoz of the asg) rolling: eb, opsworks (not ideal, it is manual deploy), cloudformation+asg+ AutoScalingRollingUpdate policy, codedeploy rolling = drop traffic to n instance &amp;gt; deploy &amp;gt; allow traffic in-place = deploy the deploy to all instances (parallel) blue/green deployment: eb ( cname swap), codedeploy, 2x(cfn+asg+elb)+route53 or 2(cfn+asg)+elb(weighted target groups) blue/green deployment and want to delay the old asg termination: codedeploy canary deployment: codedeploy only on lambda / ecs, eb ( traffic splitting), api gateway eb&amp;rsquo;s immutable deployment: create 2nd asg.</description></item><item><title>Aurora</title><link>https://hugotkk.github.com/posts/aws-aurora/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-aurora/</guid><description>RDS Read Replica> RDS Read Replica # cross AZ: OK cross region: OK promote / point-in-time recovery / restore from snapshot will create a new db instance which is not in my expectation.</description></item><item><title>AWS Config</title><link>https://hugotkk.github.com/posts/aws-config/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-config/</guid><description>config aggregator> config aggregator # aggreagate all account under organization> aggreagate all account under organization # enable service role in organization
set up iam with
viewing the organization service role give config.</description></item><item><title>AWS Elastic Beanstalk</title><link>https://hugotkk.github.com/posts/aws-eb/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-eb/</guid><description>eb> eb # eb init eb use web_dev eb list deploy code in repo
eb deploy web_dev edit config
eb config web_dev save config
eb config save apply save config</description></item><item><title>AWS Organization</title><link>https://hugotkk.github.com/posts/aws-organization/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-organization/</guid><description>aws org> aws org # o = organization = it9 r = root = root ou = organization unit = dev / prod / uat / management / network ou path: o-3ywbznlomt/r-t9g3/ou-t9g3-knls7nau/</description></item><item><title>Opsworks</title><link>https://hugotkk.github.com/posts/aws-opsworks/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-opsworks/</guid><description>OpsWorks> OpsWorks # stack = cookbooks layer = frontend, backend, api, rds (how to config to instance) app = source code. can deploy and redeploy Stack> Stack # I am exploring this cookbook from aws The nodejs demo cookbook repo does not include its dependencies In the opsworks demo, it uses opsworks-linux-demo-cookbooks-nodejs.</description></item><item><title>Aws Ground Station</title><link>https://hugotkk.github.com/posts/aws-ground-station/</link><pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-ground-station/</guid><description>https://www.youtube.com/watch?v=_MwNgO0aJo0
https://www.youtube.com/watch?v=namlZpQ6W_k</description></item><item><title>EC2 Bandwidth test</title><link>https://hugotkk.github.com/posts/aws-ec2-bandwidth-test/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-ec2-bandwidth-test/</guid><description>Objective> Objective # Test if the ec2 can reach 10Gbps bandwidth in same placement group Test if the 10Gbps is the limited by the ec2 instance type or aws AWS Limit> AWS Limit # https://docs.</description></item><item><title>AWS EKS Workshop</title><link>https://hugotkk.github.com/posts/aws-workshop/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-workshop/</guid><description>Day1> Day1 # Setup> Setup # https://www.eksworkshop.com/020_prerequisites/ec2instance https://www.eksworkshop.com/030_eksctl/launcheks https://www.eksworkshop.com/beginner/060_helm/helm_intro/install Tasks> Tasks # Deploy simple application Fargate Notes> Notes # There are 2 modes in EKS:
EC2 Fargate They can coexist in EKS.</description></item><item><title>AWS Managed Blockchain</title><link>https://hugotkk.github.com/posts/aws-managed-blockchain/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-managed-blockchain/</guid><description>Pros with AWS Managed Blockchain> Pros with AWS Managed Blockchain # no need to build the ledger by themself focus on the smart contract a single blockchain network can effectively work cross multiple parties An Overview on Blockchain Services from AWS> An Overview on Blockchain Services from AWS # https://www.</description></item><item><title>EKS vs AKS</title><link>https://hugotkk.github.com/posts/eks-vs-aks/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/eks-vs-aks/</guid><description>Control Panel Fee> Control Panel Fee # AKS: 0 EKS: fixed charge 0.1 USD / Hour Integration> Integration # I think AKS is better, most of the provisioning plugins can be enabled by one click</description></item><item><title>AWS Certified Advanced Networking - Specialty</title><link>https://hugotkk.github.com/posts/exam-aws-networking/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/exam-aws-networking/</guid><description>Resources> Resources # Exam Landing Page Sample Questions Exam Guide udemy course udemy mock exam whizlabs test &amp;amp; hand-on labs TODO> TODO # take notes revision whizlabs mocks (by topic) mock 1 (udemy) mock 2,3,4 (whizlabs) examtopic udemy quiz + exercise Revision> Revision # The numbers below are the page no of the udemy course&amp;rsquo;s pdf: AWS Certified Networking Specialty Slides v1.</description></item></channel></rss>