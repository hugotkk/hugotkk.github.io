<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cloud on Hugo's IT journal</title><link>https://hugotkk.github.com/tags/cloud/</link><description>Recent content in cloud on Hugo's IT journal</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 05 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://hugotkk.github.com/tags/cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>Enabling ALB Access Logs and Analyzing with Athena</title><link>https://hugotkk.github.com/posts/enabling-alb-access-logs-and-analyzing-with-athena/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/enabling-alb-access-logs-and-analyzing-with-athena/</guid><description>Enable ALB access logging for debugging:
Follow this guide: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/enable-access-logging.html Access logs storage:
Logs are saved in S3 Difficult to view directly Log format:
Not written to a single file New file with timestamp after a set interval Solution: Set up Athena to query logs</description></item><item><title>Using Amazon Athena for Easier AWS Log Analysis</title><link>https://hugotkk.github.com/posts/using-amazon-athena-for-easier-aws-log-analysis/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/using-amazon-athena-for-easier-aws-log-analysis/</guid><description>AWS logs&amp;rsquo; default interface can be challenging to navigate for in-depth analysis. Amazon Athena can help address two common issues.
First, CloudTrail logs&amp;rsquo; default filters can be limiting. However, with Athena, you can use SQL to apply filters to each log field, allowing for more detailed analysis and improved insights.</description></item><item><title>Working with DateTime in AWS Athena</title><link>https://hugotkk.github.com/posts/working-with-datetime-in-aws-athena/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/working-with-datetime-in-aws-athena/</guid><description>Comparing varchar DateTime:
Use &amp;lsquo;&amp;gt;&amp;rsquo; and &amp;lsquo;&amp;lt;&amp;rsquo; operators Example: time &amp;gt;= &amp;#39;2022-07-20T00:00:00Z&amp;#39; Comparing int64 DateTime:
Convert int64 and varchar to timestamp: FROM_UNIXTIME(time/1000) &amp;lt; TIMESTAMP &amp;#39;2022-07-20 00:00:00&amp;#39; Convert int64 to varchar: DATE_FORMAT(FROM_UNIXTIME(time/1000), &amp;#39;%Y-%m-%dT%H:%i:%sZ&amp;#39;) &amp;lt;= &amp;#39;2022-02-13T00:00:00Z&amp;#39;</description></item><item><title>AWS ALB</title><link>https://hugotkk.github.com/posts/aws-alb/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-alb/</guid><description>Two connections maintained> Two connections maintained # ALB to target servers. Client to ALB. Keepalive/h2 setting> Keepalive/h2 setting # Applies to ALB-to-target connection, not client-to-target servers. Why Keepalive help to improve the performance: Limited number of connections between ALB to target servers, keepalive helps.</description></item><item><title>Building a Chat Room with Lambda and Websocket in AWS API Gateway</title><link>https://hugotkk.github.com/posts/aws-api-gateway-wss/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-api-gateway-wss/</guid><description>WebSocket Overview> WebSocket Overview # WebSocket Characteristics Bi-directional, persistent TCP connection between client and server Scaling Limitations WebSocket is stateful, cannot horizontally scale without a backend to store state (eg: Redis) API Gateway with Websocket> API Gateway with Websocket # Benefits</description></item><item><title>Building a Secure API Gateway with Cognito</title><link>https://hugotkk.github.com/posts/aws-api-gateway-with-cognito/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-api-gateway-with-cognito/</guid><description>To enable authorization the api with Amazon Cognito User Pools:
Create a user pool. Check out Secure your API Gateway with Amazon Cognito User Pools for a video tutorial. In the &amp;ldquo;Method Request&amp;rdquo; &amp;gt; &amp;ldquo;Auth&amp;rdquo; section of the API Gateway console, select the user pool.</description></item><item><title>Comparing HTTP and REST API Gateways</title><link>https://hugotkk.github.com/posts/aws-api-gateway-comparson/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-api-gateway-comparson/</guid><description>Main difference> Main difference # REST HTTP Quota Management Per group Not supported API key Management Supported Not supported Authorization Lambda/Cognito Lambda/IAM/JWT Lambda Input Payload only Request details (Event) VTL model Supported Not supported SDK and Documentation Generation Supported Not supported Lambda integration> Lambda integration # Both REST and HTTP Lambda integrations offer a powerful and flexible way to integrate Lambda functions with API Gateway, with some differences in input/output format and response handling.</description></item><item><title>Setup gPRC with AWS ALB</title><link>https://hugotkk.github.com/posts/aws-alb-grpc/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-alb-grpc/</guid><description>gRPC> gRPC # Concept: Similar to REST API and JSON. Payload format: Binary Performance: Faster as smaller size than JSON. Usage: Primarily for service-to-service communication. Browser-to-service not widely supported. Protocol: Built on HTTP/2 client -&amp;gt; ALB: HTTPS only; ALB -&amp;gt; target: HTTP/HTTPS</description></item><item><title>Understanding TLS Passthrough and Other Features of AWS NLB</title><link>https://hugotkk.github.com/posts/aws-nlb/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-nlb/</guid><description>TLS Passthrough with AWS NLB> TLS Passthrough with AWS NLB # To setup TLS passthrough with NLB, follow these steps:
Listen: TCP - can be 80 or 443 Target: TCP - 443 Backend: HTTPS on 443 Here are some interesting features of NLB:</description></item><item><title>Unexpected Limitations: AWS Lambda's Inability to Directly Reference Secrets Manager and Parameter Store</title><link>https://hugotkk.github.com/posts/unexpected-limitations-aws-lambdas-inability-to-directly-reference-secrets-manager-and-parameter-store/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/unexpected-limitations-aws-lambdas-inability-to-directly-reference-secrets-manager-and-parameter-store/</guid><description>I was surprised to find that AWS Lambda cannot directly reference records from Secrets Manager in environment, especially considering that ECS can reference records from both Parameter Store and Secrets Manager.</description></item><item><title>Creating a Signed AWS API Request: A Handy Guide</title><link>https://hugotkk.github.com/posts/aws-sign-v4/</link><pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-sign-v4/</guid><description>To create a signed AWS API request, follow the detailed guide provided in Create a signed AWS API request.
To generate a signed request in Python, you can use the following script created by ChatGPT:</description></item><item><title>Understanding OAuth 2.0: Explore with Amazon Cognito</title><link>https://hugotkk.github.com/posts/aws-cognito/</link><pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-cognito/</guid><description>Difference between OAuth2.0, OIDC and SAML2> Difference between OAuth2.0, OIDC and SAML2 # OAuth 2.0 provides authorization using ID token. OIDC provides authentication using access token. SAML2 provides both authentication and authorization.</description></item><item><title>How to host a static website on S3</title><link>https://hugotkk.github.com/posts/aws-s3-hosting/</link><pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-s3-hosting/</guid><description>Concepts> Concepts # Block Public Access> Block Public Access # Prevent any public access in ACL or bucket policy. ACL: If you block public access in ACL, any public access granted to everyone will be ignored.</description></item><item><title>Aurora</title><link>https://hugotkk.github.com/posts/aws-aurora/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-aurora/</guid><description>RDS Read Replica> RDS Read Replica # cross AZ: OK cross region: OK promote / point-in-time recovery / restore from snapshot will create a new db instance which is not in my expectation.</description></item><item><title>Opsworks</title><link>https://hugotkk.github.com/posts/aws-opsworks/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/aws-opsworks/</guid><description>OpsWorks> OpsWorks # stack = cookbooks layer = frontend, backend, api, rds (how to config to instance) app = source code. can deploy and redeploy Stack> Stack # I am exploring this cookbook from aws The nodejs demo cookbook repo does not include its dependencies In the opsworks demo, it uses opsworks-linux-demo-cookbooks-nodejs.</description></item><item><title>Coretek's cloud migration methodology</title><link>https://hugotkk.github.com/posts/az-migration-strategies/</link><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/az-migration-strategies/</guid><description>https://www.youtube.com/watch?v=tj3F0tX8eyc
6:26 - 5 steps
Assess> Assess # Cloud Economic Assessment (8:20)> Cloud Economic Assessment (8:20) # understand resources needed on-premise (mem, storage, bandwidth)
Plan> Plan # use cloud adoption framework (10:45) Migrate> Migrate # Cloud Migration Strategies (4:30)> Cloud Migration Strategies (4:30) # Rehost - create vm on cloud and move application to it</description></item><item><title>A Roadmap to Cloud Centre of Excellence Adoption</title><link>https://hugotkk.github.com/posts/cloud-center-of-excellenace/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/cloud-center-of-excellenace/</guid><description>https://www.youtube.com/watch?v=mUTGdSA60Ao
introduction - Cloud Centre of Excellence is a team that can help the organisation for cloud adoption role &amp;amp; responsible characteristic for the team member best practice Characteristic> Characteristic # driving the organisation forward has ability to stand up - open-minded be confident why and how to do it - clear minded / big picture thinkers diverse and cross-functional Skill Set> Skill Set # Cost management Project Management (Transparent) Cloud operation engineer (CI/CD) Data engineer (new currency, capture data from IoT, video stream) Application Security (IAM, Policy, Firewall) Best Practise> Best Practise # Keep passion &amp;amp; excitement Start small (5-7 ppl in a team) Rotate people (training) Communication Scaling and reorganising Think of the failover and backup plan Cloud training for organisation Bill, cost optimization Empower the team (courage them trying new role, new service, bleeding-edge tech) Gain transparency (everyone knows the progress&amp;hellip;why you do that&amp;hellip;) Notes> Notes # cloud makes anything as code -&amp;gt; code makes things more transparent -&amp;gt; the complexity of the project is reduced many jobs can be automated through cloud and they are automatically documented as code is it possible to create a roadmap / resources library for the whole organisation (like AWS workshop)?</description></item><item><title>Brief Overview of Scan, Query, Select, and Filter of DyanmoDB</title><link>https://hugotkk.github.com/posts/brief-overview-of-scan-query-select-and-filter-of-dyanmodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugotkk.github.com/posts/brief-overview-of-scan-query-select-and-filter-of-dyanmodb/</guid><description>Scan and Query:
Amazon DynamoDB has two operations for retrieving data: Scan and Query. Scan retrieves all items in a table, making it inefficient for larger tables. Query is designed to retrieve specific items based on their partition key values, allowing filtering of results.</description></item></channel></rss>